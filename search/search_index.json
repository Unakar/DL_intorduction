{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6df1\u5ea6\u5b66\u4e60\u5165\u95e8\u4e09\u8bb2","text":"<p>\u4ece\u52a8\u624b\u5b9e\u73b0cifar10\u5206\u7c7b\u5f00\u59cb\uff01</p>"},{"location":"#_2","title":"\u7b2c\u4e00\u8bb2","text":"<p>\u4e0d\u8bb2(\u9ed8\u8ba4\u638c\u63e1)\uff1aloss, SGD, optimizer, lr, MLP, softmax...</p> <p>\u4eca\u65e5\u5185\u5bb9\u6982\u8981\uff1a</p> <ol> <li> <p>\u57fa\u4e8epytorch\u5b9e\u73b0\u4e00\u4e2acifar10\u5206\u7c7b\u4efb\u52a1\u7684baseline model</p> </li> <li> <p>\u7279\u5f81\u5de5\u7a0b\u521d\u63a2(\u57fa\u4e8etransforms\u7684standarlize\uff0cAugmentation)\uff0c\u56fe\u50cf\u53d8\u6362</p> </li> <li> <p>\u6a21\u578b\u642d\u5efa(\u524d\u5411\u53cd\u5411\u4f20\u64ad\uff0cTrainer Demo\uff0c\u5377\u79ef\u6838\uff0c\u6c60\u5316\uff0cnorm)</p> </li> <li> <p>Optimizer(SGD,Adam,Weight decay,\u4f59\u5f26\u9000\u706b\u539f\u7406)</p> </li> <li> <p>\u5bf9Bottleneck\u4f18\u5316\u4e0e\u8fdb\u4e00\u6b65\u63a2\u7a76\uff0c\u52a0\u6df1\u7406\u89e3</p> </li> <li> <p>\u968f\u7740\u7f51\u7edc\u5c42\u6570\u52a0\u6df1\uff0c\u6a21\u578b\u6548\u679c\u662f\u5426\u4e00\u5b9a\u53d8\u597d\uff1f(Resnet\uff0c\u8df3\u8dc3\u8fde\u63a5)</p> </li> <li> <p>\u7384\u5b66\u8c03\u53c2\u8bbe\u7f6e\uff1a\u4e0d\u540c\u4efb\u52a1lr\u8be5\u662f\u591a\u5c11\uff1fbatch\u9009\u62e9\u5bf9\u6a21\u578b\u51c6\u786e\u7387\u5f71\u54cd\uff1f(\u6211\u7684\u7ecf\u9a8c)</p> </li> <li> <p>\u5982\u4f55\u5bf9\u6570\u636e\u505a\u589e\u5f3a\uff0c\u4f7f\u5f97\u5c0f\u6570\u636e\u96c6\u4e0a\u4e00\u6837\u83b7\u5f97\u8f83\u9ad8\u7684\u6a21\u578b\u6027\u80fd\uff1f(\u751a\u81f3Datafree)</p> </li> <li> <p>\u5982\u4f55\u8ba9\u6a21\u578b\u5feb\u901f\u6536\u655b\uff1f\u6a21\u578b\u524d\u540e\u5c42\u5982\u4f55\u4fdd\u6301\u5b66\u5230\u7684\u7279\u5f81\u4e0d\u9057\u5fd8\uff1f(Norm)</p> </li> <li> <p>\u7384\u5b66\u8c03\u53c22\uff1a\u6a21\u578b\u53c2\u6570\u521d\u59cb\u5316\u8bbe\u7f6e\uff1f(Kaiming initialize &amp; Xavier)</p> </li> <li> <p>\u540c\u7b49\u7f51\u7edc\u5c42\u6570\u4e0b\u5982\u4f55\u63d0\u53d6\u66f4\u591a\u7279\u5f81\uff1f(\u901a\u9053\u6570\u7ffb\u500d\uff1f\u591a\u5934\u6ce8\u610f\u529b\uff1f)</p> </li> <li> <p>\u7384\u5b66\u89e3\u91ca3\uff1a\u4e3a\u4ec0\u4e48\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5work?(feature map\u7684\u53ef\u89e3\u91ca\u6027)</p> </li> <li> <p>\u6709\u7a7a\u518d\u8bb2\uff1a</p> </li> <li> <p>\u5982\u4f55\u5728\u8be5\u6570\u636e\u96c6\u4e0a\u8fbe\u5230\u6700\u9ad8\u51c6\u786e\u7387\uff1f\u5c1d\u8bd5\u903c\u8fd1SOTA</p> </li> <li> <p>\u6709\u65e0\u529e\u6cd5\uff0c\u7ed9\u5b9a\u6570\u636e\u96c6\u540e\u4e0d\u5199\u4efb\u4f55\u795e\u7ecf\u7f51\u7edc\u4ee3\u7801\uff0c\u81ea\u52a8\u5b8c\u6210\u8be5\u95ee\u9898\u4e0b\u6a21\u578b\u67b6\u6784\u642d\u5efa\u4e0e\u8d85\u53c2\u6570\u8bbe\u7f6e(\u592a\u4f1f\u5927\u4e86NAS)</p> </li> <li> <p>\u6a21\u578b\u592a\u7b28\u91cd\uff0c\u63a8\u7406\u901f\u5ea6\u6162\uff1f(\u592a\u4f1f\u5927\u4e86\u6a21\u578b\u538b\u7f29\uff0c\u526a\u679d\u91cf\u5316\uff0c\u751a\u81f3\u53ef\u4ee5\u90e8\u7f72\u5728\u5355\u7247\u673a\u4e0a)</p> </li> <li> <p>\u5982\u4f55\u8ba9\u53e6\u4e00\u4e2a\u6a21\u578b\u5b66\u5230\u4e00\u4e2a\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u7684\u77e5\u8bc6\uff1f\uff08\u65e0\u9700\u91cd\u65b0\u8bad\u7ec3\uff0c\u592a\u4f1f\u5927\u4e86\u6a21\u578b\u84b8\u998f\uff09</p> </li> <li> <p>\u66f4\u591a\u66f4\u591a\u7684trick\u5206\u4eab.....\u4ee5\u53ca\u4e00\u70b9\u6df1\u5ea6\u5b66\u4e60\u7684\u54f2\u5b66\u601d\u8003</p> </li> </ol>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/","title":"\u63a2\u7a76\u5b9e\u9a8c","text":""},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#0","title":"0","text":"<p>batch_size\u662f\u4e0d\u662f\u8d8a\u5927\u8d8a\u597d\uff1f</p> <p>Answer: \u4e0d\u662f \u4f7f\u7528\u4e0d\u540c\u7684batch_size\uff0c\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u5206\u522b\u4e3a\uff1a | batch_size | accuracy | | :--------: | :------: | |     16     |   65%    | |     32     |   63%    | |     64     |   56%    | |    128     |   47%    |</p> <p>\u8fd9\u8bf4\u660e\u4e86batch_size\u5e76\u4e0d\u662f\u8d8a\u5927\u8d8a\u597d\u3002</p> <p>\u53ef\u80fd\u7684\u539f\u56e0\u662f\uff1a - \u5927\u7684batch\u4f1a\u5bfc\u81f4\u6a21\u578b\u66f4\u5bb9\u6613\u6536\u655b\u5230\u5c40\u90e8\u6700\u4f18\u89e3\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u6700\u4f18\u89e3\uff1b\u5c0f\u7684batch\u5b9e\u9645\u8d77\u4e86\u9000\u706b\u7684\u4f5c\u7528 - \u5927\u7684batch\u4f1a\u5bfc\u81f4\u6a21\u578b\u66f4\u65b0\u6b21\u6570\u51cf\u5c11\uff0c\u6536\u655b\u901f\u5ea6\u53d8\u6162</p> <p>\u53e6\u5916\uff0c\u5927\u7684batch\u4e5f\u53ef\u80fd\u5bfc\u81f4\u663e\u5b58\u5bb9\u91cf\u4e0d\u8db3\uff0c\u65e0\u6cd5\u8bad\u7ec3</p>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#1","title":"1","text":"<p>\u5728\u8bad\u7ec3\u96c6\u90a3\u91cc\u7684transform\u8bd5\u4e00\u4e0bRandomHorizontalFlip\uff0c\u6548\u679c\u4f1a\u66f4\u597d\u5417\uff1f</p> <p>Answer:  \u6211\u4eec\u5bf9\u6570\u636e\u96c6\u505a\u4e86RandomHorizontalFlip\u7684Augmentation\uff0c\u6539\u52a8\u540e\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u4e3a56%\uff0c\u4e0e\u539f\u6765\u76f8\u6bd4\u6ca1\u6709\u660e\u663e\u53d8\u5316 \u5176Training Loss\u5728\u6700\u540e\u4e00\u4e2aepoch\u5e73\u5747\u4e3a1.226\uff0c\u76f8\u8f83\u539f\u6765\u7684\u7248\u672c\u4e2d\u76841.209\u9ad8\u4e86\u4e00\u70b9\uff0c\u8fd9\u662f\u5728\u9884\u671f\u4e4b\u4e2d\u7684\uff0c\u56e0\u4e3a\u589e\u52a0Augmentation\u4e4b\u540e\u8fc7\u62df\u5408\u7684\u7a0b\u5ea6\u964d\u4f4e\u4e86\uff0cTraining Loss\u4f1a\u63d0\u9ad8 \u5b9e\u9645\u4e0a\uff0c\u7531\u4e8e\u8fd9\u4e2aAugmentation\u662f\u6bd4\u8f83\u5f31\u7684\uff0c\u6240\u4ee5\u6548\u679c\u5e76\u4e0d\u660e\u663e</p>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#2","title":"2","text":"<p>\u6362\u4e00\u4e2aoptimizer, \u4f7f\u6548\u679c\u66f4\u597d\u4e00\u4e9b</p> <p>Answer: \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Adam\u6765\u5927\u5e45\u4f18\u5316\u8bad\u7ec3\u6548\u7387</p> <pre><code>self.optimizer = torch.optim.Adam(self.model.parameters(), lr=Config.LEARNING_RATE)\n</code></pre> <p>\u7528\u5176\u8bad\u7ec3\u540e\uff0c\u6536\u655b\u901f\u5ea6\u5927\u5e45\u63d0\u9ad8\uff0c\u4e14\u6700\u7ec8\u7cbe\u5ea6\u4e5f\u5927\u5e45\u63d0\u9ad8\uff1a</p> <p>\u5bf9\u6bd4\u5b83\u4e0e\u539f\u6765\u7684SGD\u5728\u6bcf\u4e2aepoch\u7684\u8868\u73b0\u5982\u4e0b\uff1a | epoch |  SGD  | Adam  | | :---: | :---: | :---: | |   1   |  16%  |  48%  | |   2   |  29%  |  54%  | |   3   |  36%  |  57%  | |   4   |  40%  |  60%  | |   5   |  43%  |  62%  | |   6   |  46%  |  62%  | |   7   |  48%  |  63%  | |   8   |  50%  |  64%  | |   9   |  51%  |  63%  | |  10   |  53%  |  65%  | |  11   |  55%  |  64%  | |  12   |  56%  |  65%  |</p> <p>\u8fd9\u6837\u7684\u7ed3\u679c\u5728\u9884\u671f\u4e4b\u4e2d\uff0c\u6bd5\u7adfAdam\u5df2\u7ecf\u6210\u4e3a\u5e7f\u5927\u6df1\u5ea6\u5b66\u4e60\u4efb\u52a1\u7684\u6807\u914d\u4f18\u5316\u5668\u4e86\uff0c\u5b83\u5728\u4e8c\u9636\u4e0a\u5bf9\u52a8\u91cf\u8fdb\u884c\u4fee\u6b63\uff0c\u4f7f\u5f97\u5728loss\u7684landscape\u8f83\u4e3a\u6781\u7aef\u7684\u60c5\u51b5\u4e0b\uff0c\u4ecd\u80fd\u4fdd\u6301\u8f83\u597d\u7684\u6536\u655b\u6027\u3002</p>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#3","title":"3","text":"<p>\u4fdd\u6301epoch\u6570\u4e0d\u53d8\uff0c\u52a0\u4e00\u4e2ascheduler\uff0c\u662f\u5426\u80fd\u8ba9\u6548\u679c\u66f4\u597d\u4e00\u4e9b</p> <p>Answer:  \u6211\u4eec\u4f7f\u7528\u6700\u7b80\u5355\u7684StepLR\u6765\u8fdb\u884c\u5b66\u4e60\u7387\u7684\u8c03\u6574\uff0c\u6211\u4eec\u8bbe\u7f6e\u7684\u53c2\u6570\u4ee4\u5176\u6bcf\u8fc75\u4e2aepoch\u5b66\u4e60\u7387\u51cf\u534a\uff0c\u521d\u59cb\u5b66\u4e60\u7387\u8bbe\u4e3a0.002\uff0c\u5206\u522b\u5bf9SGD\u4e0eAdam\u6d4b\u8bd5\u5982\u4e0b\uff1a |    Group     | SGD-Accuracy | SGD-Loss | Adam-Accuracy | Adam-Loss | | :----------: | :----------: | :------: | :-----------: | :-------: | | No-Scheduler |     56%      |  1.211   |      65%      |   0.779   | |   Step-LR    |     60%      |  1.068   |      65%      |   0.668   |</p> <p>\u53ef\u4ee5\u770b\u5230\uff0c\u4f7f\u7528StepLR\u540e\uff0cSGD\u7684\u6548\u679c\u6709\u4e86\u4e00\u5b9a\u7684\u63d0\u5347\uff0c\u800cAdam\u7684\u6548\u679c\u6ca1\u6709\u660e\u663e\u53d8\u5316\uff0c\u4f46\u4e24\u4e2a\u4f18\u5316\u5668\u8bad\u51fa\u6765\u7684Loss\u90fd\u6709\u4e86\u660e\u663e\u7684\u4e0b\u964d\uff0c\u8fd9\u8bf4\u660e\u4e86\u5b66\u4e60\u7387\u7684\u8c03\u6574\u662f\u6709\u6548\u7684\uff0c\u7684\u786e\u548c\u8c03\u5c0f\u5b66\u4e60\u7387\u80fd\u4fc3\u8fdb\u6536\u655b\u7684\u9884\u671f\u4e00\u81f4\uff0c\u800cAdam\u7684\u6548\u679c\u6ca1\u6709\u660e\u663e\u53d8\u5316\u53ef\u80fd\u662f\u56e0\u4e3a\u8fc7\u62df\u5408\u4e86\u3002</p>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#4","title":"4","text":"<p>\u6839\u636eNet() \u751f\u6210 Net1(), \u52a0\u5165\u4e09\u4e2abatch_normalization\u5c42\uff0c\u663e\u793a\u6d4b\u8bd5\u7ed3\u679c</p> <p>Answer:  \u5728\u4e24\u4e2a\u5377\u79ef\u5c42\u548c\u7b2c\u4e00\u4e2a\u7ebf\u6027\u5c42\u540e\u52a0\u5165BN\u5c42\u540e\uff0c\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u4e3a65%\uff0c\u8f83\u539f\u6765\u63d0\u5347\u4e869%\uff0c\u53ef\u89c1BatchNorm\u5bf9\u6548\u679c\u7684\u63d0\u5347\u6781\u4e3a\u663e\u8457\u3002 BatchNorm\u80fd\u63d0\u5347\u6548\u679c\u4e3b\u8981\u662f\u56e0\u4e3a\uff1a - \u53ef\u4ee5\u4fdd\u8bc1\u5404\u5c42\u6570\u636e\u7279\u5f81\u5206\u5e03\u7684\u7a33\u5b9a\u6027\uff0c\u4f7f\u5f97\u6a21\u578b\u66f4\u5bb9\u6613\u6536\u655b\uff0c\u4e0d\u5bb9\u6613\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8 - \u53ef\u4ee5\u4fdd\u8bc1\u9690\u542b\u5c42\u8f93\u51fa\u96c6\u4e2d\u5728\u4e00\u822c\u6fc0\u6d3b\u51fd\u6570\u7684\u4e3b\u8981\u975e\u7ebf\u6027\u533a</p> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>class BnModel(nn.Module): # Add Batch Normalization (Net1)\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.bn1 = nn.BatchNorm2d(6)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n        self.bn2 = nn.BatchNorm2d(16)\n\n        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n        self.bn3 = nn.BatchNorm1d(120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.bn1(x)\n        x = self.pool(F.relu(self.conv2(x)))\n        x = self.bn2(x)\n        x = torch.flatten(x, 1) # flatten all dimensions except batch\n        x = F.relu(self.fc1(x))\n        x = self.bn3(x)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n</code></pre>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#5","title":"5","text":"<p>\u6839\u636eNet() \u751f\u6210Net2(), \u4f7f\u7528Kaiming\u521d\u59cb\u5316\u5377\u79ef\u4e0e\u5168\u8fde\u63a5\u5c42\uff0c\u663e\u793a\u6d4b\u8bd5\u7ed3\u679c</p> <p>Answer:  \u52a0\u5165Kaiming\u521d\u59cb\u5316\u540e\uff0c\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u4e3a57%\uff0c\u8f83\u539f\u6765\u63d0\u5347\u4e861%\u3002</p> <p>\u5b9e\u9645\u4e0a\uff0c<code>nn.Linear</code>\u53ca<code>nn.Conv2d</code>\u7684\u7236\u7c7b<code>nn._ConvNd</code>\u7684\u521d\u59cb\u5316\u9ed8\u8ba4\u5c31\u4f7f\u7528\u4e86Kaiming\u521d\u59cb\u5316\uff0c\u5b83\u4eec\u521d\u59cb\u5316\u65f6\u90fd\u8c03\u7528\u4e86\u4ee5\u4e0b\u51fd\u6570\uff1a</p> <pre><code>def reset_parameters(self) -&gt; None:\n    # Setting a=sqrt(5) in kaiming_uniform is the same as initializing with\n    # uniform(-1/sqrt(in_features), 1/sqrt(in_features)). For details, see\n    # https://github.com/pytorch/pytorch/issues/57109\n    init.kaiming_uniform_(self.weight, a=math.sqrt(5))\n    if self.bias is not None:\n        fan_in, _ = init._calculate_fan_in_and_fan_out(self.weight)\n        bound = 1 / math.sqrt(fan_in) if fan_in &gt; 0 else 0\n        init.uniform_(self.bias, -bound, bound)\n</code></pre> <p>\u6b64\u5904\u7684\u63d0\u5347\u53ef\u80fd\u662f\u56e0\u4e3aKaiming\u521d\u59cb\u5316\u7684\u53c2\u6570\u4e0d\u4e00\u6837\u3002</p> <p>\u8be5\u7f51\u7edc\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>class KaimingInitModel(nn.Module): # Using Kaiming Initialization (Net2)\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 6, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(6, 16, 5)\n\n        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n\n        torch.nn.init.kaiming_uniform_(self.conv1.weight, a=0, mode='fan_in', nonlinearity='relu')\n        torch.nn.init.kaiming_uniform_(self.conv2.weight, a=0, mode='fan_in', nonlinearity='relu')\n        torch.nn.init.kaiming_uniform_(self.fc1.weight, a=0, mode='fan_in', nonlinearity='relu')\n        torch.nn.init.kaiming_uniform_(self.fc2.weight, a=0, mode='fan_in', nonlinearity='relu')\n        torch.nn.init.kaiming_uniform_(self.fc3.weight, a=0, mode='fan_in', nonlinearity='relu')\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = torch.flatten(x, 1) # flatten all dimensions except batch\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n</code></pre>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#6","title":"6","text":"<p>\u6839\u636eNet()\u751f\u6210Net3(),\u5c06Net()\u4e2d\u7684\u901a\u9053\u6570\u52a0\u5230\u539f\u6765\u76842\u500d\uff0c\u663e\u793a\u6d4b\u8bd5\u7ed3\u679c</p> <p>Answer:  \u901a\u9053\u6570\u7ffb\u500d\u540e\uff0c\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u4e3a60%\uff0c\u8f83\u539f\u6765\u63d0\u5347\u4e864%\uff0c\u53ef\u89c1\u63d0\u5347\u901a\u9053\u6570\u6709\u4e00\u5b9a\u6548\u679c\u3002\u8fd9\u4e3b\u8981\u662f\u56e0\u4e3a\u901a\u9053\u6570\u589e\u52a0\u540e\uff0c\u5377\u79ef\u6838\u7684\u79cd\u7c7b\u589e\u52a0\u4e86\uff0c\u80fd\u63d0\u53d6\u7684\u7279\u5f81\u79cd\u7c7b\u4e5f\u589e\u52a0\u4e86\u3002</p> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>class DoubleChannelModel(nn.Module): # Doubling the Channel (Net3)\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(3, 12, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(12, 32, 5)\n\n        self.fc1 = nn.Linear(32 * 5 * 5, 120)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = torch.flatten(x, 1) # flatten all dimensions except batch\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n</code></pre>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#7","title":"7","text":"<p>\u5728\u4e0d\u6539\u53d8Net()\u7684\u57fa\u7840\u7ed3\u6784\uff08\u5377\u79ef\u5c42\u6570\u3001\u5168\u8fde\u63a5\u5c42\u6570\u4e0d\u53d8\uff09\u548c\u8bad\u7ec3epoch\u6570\u7684\u524d\u63d0\u4e0b\uff0c\u4f60\u80fd\u5f97\u5230\u6700\u597d\u7684\u7ed3\u679c\u662f\u591a\u5c11\uff1f</p> <p>Answer:  \u6211\u4eec\u8fdb\u884c\u4e86\u5982\u4e0b\u6539\u8fdb\uff1a - \u4f7f\u7528Adam\u4f18\u5316\u5668\uff0c\u589e\u52a0\u4e860.0001\u7684WEIGHT_DECAY\uff0c\u4f7f\u7528<code>CosineAnnealingLR</code>\u4f59\u5f26\u9000\u706b\u5b66\u4e60\u7387\u8c03\u6574\u5668\uff0c\u521d\u59cb\u5b66\u4e60\u7387\u8bbe\u4e3a0.002 - \u540c\u4e0a\u8ff0BN\u7f51\u7edc\u52a0\u5165\u4e09\u4e2aBatchNorm\u5c42\uff0c\u5e76\u52a0\u5165\u4e86\u4e09\u4e2ap=0.1\u7684dropout\u5c42\uff0c\u8fd9\u4e09\u4e2a\u5c42\u6b63\u597d\u52a0\u5728BatchNorm\u5c42\u4e4b\u540e - \u524d\u4e24\u5c42\u5377\u79ef\u5c42\u901a\u9053\u6570\u5206\u522b\u6539\u4e3a256\u4e0e256 - \u91c7\u7528\u4e86\u5927\u91cf\u6570\u636e\u589e\u5f3a\uff0c\u5177\u4f53\u5982\u4e0b\uff08\u5176\u4e2dAutoAugment()\u6765\u81ea\u8bba\u6587'AugMix: A Simple Data Processing Method to Improve Robustness and Uncertainty - https://arxiv.org/abs/1912.02781\uff09\uff1a</p> <pre><code>def get_transform(self):\n    res = []\n    res.append(transforms.RandomHorizontalFlip(p=0.5))\n    res.extend([transforms.Pad(2, padding_mode='constant'),\n                    transforms.RandomCrop([32,32])])\n    res.append(transforms.RandomApply([AutoAugment()], p=0.6))\n    res.append(transforms.ToTensor())\n    res += [transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]\n    return transforms.Compose(res)\n</code></pre> <p>\u6700\u7ec8\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u4e3a83%\uff0c\u8f83\u539f\u6765\u63d0\u5347\u4e8627%\u3002</p> <p>\u6a21\u578b\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>class BetterBaselineModel(nn.Module): # Better Baseline Model (Net4)\n    def __init__(self):\n        super().__init__()\n        channel1 = 256\n        channel2 = 256\n        self.conv1 = nn.Conv2d(3, channel1, 5)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.bn1 = nn.BatchNorm2d(channel1)\n        self.dropout1 = nn.Dropout(0.1)\n        self.conv2 = nn.Conv2d(channel1, channel2, 5)\n        self.bn2 = nn.BatchNorm2d(channel2)\n        self.dropout2 = nn.Dropout(0.1)\n\n        self.fc1 = nn.Linear(channel2 * 5 * 5, 120)\n        self.bn3 = nn.BatchNorm1d(120)\n        self.dropout3 = nn.Dropout(0.1)\n        self.fc2 = nn.Linear(120, 84)\n        self.fc3 = nn.Linear(84, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.bn1(x)\n        x = self.dropout1(x)\n        x = self.pool(F.relu(self.conv2(x)))\n        x = self.bn2(x)\n        x = self.dropout2(x)\n        x = torch.flatten(x, 1) # flatten all dimensions except batch\n        x = F.relu(self.fc1(x))\n        x = self.bn3(x)\n        x = self.dropout3(x)\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n</code></pre>"},{"location":"cifar10/%E6%8E%A2%E7%A9%B6/#8","title":"8","text":"<p>\u4f7f\u7528ResNet18(),\u663e\u793a\u6d4b\u8bd5\u7ed3\u679c</p> <p>Answer:  \u4f7f\u7528resnet-18\uff0c\u4e0a\u4e00\u95ee\u5176\u5b83\u53c2\u6570\u4e0d\u53d8\uff0c\u5728\u6d4b\u8bd5\u96c6\u4e0a\u7684\u51c6\u786e\u7387\u4e3a83%\uff0c\u4e0e\u4e0a\u4e00\u95ee\u7684\u7ed3\u679c\u76f8\u540c\u3002\u5176\u5728\u8f83\u5c11\u53c2\u6570\u4e0b\u80fd\u8fbe\u5230\u8fd9\u6837\u7684\u6548\u679c\uff0c\u8bf4\u660e\u4e86\u5176\u4f18\u79c0\u7684\u6027\u80fd\uff0c\u8fd9\u53ef\u80fd\u662f\u56e0\u4e3a\uff1a - \u5176\u6b8b\u5dee\u8fde\u63a5\u80fd\u591f\u6709\u6548\u5730\u7f13\u89e3\u68af\u5ea6\u6d88\u5931\u95ee\u9898\uff0c\u65b9\u4fbf\u5c42\u6570\u5806\u53e0 - \u8ba9\u7f51\u7edc\u5b66\u4e60\u6b8b\u5dee\u6bd4\u5b66\u4e60\u539f\u59cb\u7279\u5f81\u66f4\u5bb9\u6613\uff0c\u514d\u53bb\u4e86\u5bf9\u989d\u5916\u7684\u6052\u7b49\u6620\u5c04\u7684\u884c\u4e3a\u7684\u5b66\u4e60</p> <p>\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a</p> <pre><code>class ResNet(nn.Module): # Resnet18\n    def __init__(self):\n        super().__init__()\n        self.model = torchvision.models.resnet18(pretrained=False)\n        if Config.PRETRAINED:\n            self.model.load_state_dict(torch.load(Config.RESNET_PRETRAINED_PATH))\n            for param in self.model.parameters():\n                param.requires_grad = False\n        self.model.fc = nn.Linear(512, 10)\n        self.model.fc.requires_grad_(True)\n\n    def forward(self, x):\n        x = self.model(x)\n        return x\n</code></pre>"},{"location":"cifar10/%E9%97%AE%E9%A2%98/","title":"\u7591\u95ee\u89e3\u7b54","text":""},{"location":"cifar10/%E9%97%AE%E9%A2%98/#1-modeltrainmodeleval","title":"1. model.train()\u548cmodel.eval()\u4ec0\u4e48\u4f5c\u7528\uff1f","text":"<p>model.train()\u7684\u4f5c\u7528\u662f\u542f\u7528 Batch Normalization \u548c Dropout\u3002 model.train()\u662f\u4fdd\u8bc1BN\u5c42\u80fd\u591f\u7528\u5230\u6bcf\u4e00\u6279\u6570\u636e\u7684\u5747\u503c\u548c\u65b9\u5dee\u3002\u5bf9\u4e8eDropout\uff0cmodel.train()\u662f\u968f\u673a\u53d6\u4e00\u90e8\u5206\u7f51\u7edc\u8fde\u63a5\u6765\u8bad\u7ec3\u66f4\u65b0\u53c2\u6570\u3002 </p> <p>model.eval()\u7684\u4f5c\u7528\u662f\u4e0d\u542f\u7528 Batch Normalization \u548c Dropout\u3002 \u8bad\u7ec3\u5b8ctrain\u6837\u672c\u540e\uff0c\u751f\u6210\u7684\u6a21\u578bmodel\u8981\u7528\u6765\u6d4b\u8bd5\u6837\u672c\u3002\u5728model(test)\u4e4b\u524d\uff0c\u9700\u8981\u52a0\u4e0amodel.eval()\uff0c\u5426\u5219\u7684\u8bdd\uff0c\u6709\u8f93\u5165\u6570\u636e\uff0c\u5373\u4f7f\u4e0d\u8bad\u7ec3\uff0c\u5b83\u4e5f\u4f1a\u6539\u53d8\u6743\u503c\u3002\u8fd9\u662fmodel\u4e2d\u542b\u6709BN\u5c42\u548cDropout\u6240\u5e26\u6765\u7684\u7684\u6027\u8d28\u3002 </p>"},{"location":"cifar10/%E9%97%AE%E9%A2%98/#2-conv2d","title":"2. Conv2d\u53c2\u6570\uff1f\u5377\u79ef\u6838\u7684\u610f\u4e49\uff1f\u6c60\u5316\u7684\u610f\u4e49\uff1f","text":"<p>nn.Conv2d (self, in_channels, out_channels, kernel_size, stride=1, padding=0, dilation=1, groups=1, bias=True)) </p> <p>1. \u5377\u79ef\u6838\uff08convolutional kernel\uff09\uff1a\u53ef\u4ee5\u770b\u4f5c\u5bf9\u67d0\u4e2a\u5c40\u90e8\u7684\u52a0\u6743\u6c42\u548c\uff1b\u5b83\u662f\u5bf9\u5e94\u5c40\u90e8\u611f\u77e5\uff0c\u5b83\u7684\u539f\u7406\u662f\u5728\u89c2\u5bdf\u67d0\u4e2a\u7269\u4f53\u65f6\u6211\u4eec\u65e2\u4e0d\u80fd\u89c2\u5bdf\u6bcf\u4e2a\u50cf\u7d20\u4e5f\u4e0d\u80fd\u4e00\u6b21\u89c2\u5bdf\u6574\u4f53\uff0c\u800c\u662f\u5148\u4ece\u5c40\u90e8\u5f00\u59cb\u8ba4\u8bc6\uff0c\u8fd9\u5c31\u5bf9\u5e94\u4e86\u5377\u79ef\u3002\u5377\u79ef\u6838\u7684\u5927\u5c0f\u4e00\u822c\u67091x1,3x3\u548c5x5\u7684\u5c3a\u5bf8\uff08\u4e00\u822c\u662f\u5947\u6570x\u5947\u6570\uff09\u3002</p> <p>\u5377\u79ef\u6838\u7684\u4e2a\u6570\u5c31\u5bf9\u5e94\u8f93\u51fa\u7684\u901a\u9053\u6570\uff08channels\uff09\uff0c\u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u7684\u662f\u5bf9\u4e8e\u8f93\u5165\u7684\u6bcf\u4e2a\u901a\u9053\uff0c\u8f93\u51fa\u6bcf\u4e2a\u901a\u9053\u4e0a\u7684\u5377\u79ef\u6838\u662f\u4e0d\u4e00\u6837\u7684\u3002\u6bd4\u5982\u8f93\u5165\u662f28x28x192(WxDxK,K\u4ee3\u8868\u901a\u9053\u6570)\uff0c\u7136\u540e\u57283x3\u7684\u5377\u79ef\u6838\uff0c\u5377\u79ef\u901a\u9053\u6570\u4e3a128\uff0c\u90a3\u4e48\u5377\u79ef\u7684\u53c2\u6570\u67093x3x192x128\uff0c\u5176\u4e2d\u524d\u4e24\u4e2a\u5bf9\u5e94\u7684\u6bcf\u4e2a\u5377\u79ef\u91cc\u9762\u7684\u53c2\u6570\uff0c\u540e\u4e24\u4e2a\u5bf9\u5e94\u7684\u5377\u79ef\u603b\u7684\u4e2a\u6570\uff08\u4e00\u822c\u7406\u89e3\u4e3a\uff0c\u5377\u79ef\u6838\u7684\u6743\u503c\u5171\u4eab\u53ea\u5728\u6bcf\u4e2a\u5355\u72ec\u901a\u9053\u4e0a\u6709\u6548\uff0c\u81f3\u4e8e\u901a\u9053\u4e0e\u901a\u9053\u95f4\u7684\u5bf9\u5e94\u7684\u5377\u79ef\u6838\u662f\u72ec\u7acb\u4e0d\u5171\u4eab\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u662f192x128\uff09\u3002</p> <p>2. \u6c60\u5316\uff08pooling\uff09\uff1a\u5377\u79ef\u7279\u5f81\u5f80\u5f80\u5bf9\u5e94\u67d0\u4e2a\u5c40\u90e8\u7684\u7279\u5f81\u3002\u8981\u5f97\u5230global\u7684\u7279\u5f81\u9700\u8981\u5c06\u5168\u5c40\u7684\u7279\u5f81\u6267\u884c\u4e00\u4e2aaggregation\uff08\u805a\u5408\uff09\u3002\u6c60\u5316\u5c31\u662f\u8fd9\u6837\u4e00\u4e2a\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5377\u79ef\u901a\u9053\uff0c\u5c06\u66f4\u5927\u5c3a\u5bf8\uff08\u751a\u81f3\u662fglobal\uff09\u4e0a\u7684\u5377\u79ef\u7279\u5f81\u8fdb\u884cpooling\u5c31\u53ef\u4ee5\u5f97\u5230\u66f4\u6709\u5168\u5c40\u6027\u7684\u7279\u5f81\u3002\u8fd9\u91cc\u7684pooling\u5f53\u7136\u5c31\u5bf9\u5e94\u4e86cross region\u3002</p>"},{"location":"cifar10/%E9%97%AE%E9%A2%98/#3","title":"3. \u6743\u91cd\u5982\u4f55\u521d\u59cb\u5316\uff1f","text":"<p>\u4e3a\u4ec0\u4e48\u521d\u59cb\u5316\u5f88\u91cd\u8981</p> <p>\u4e0d\u6b63\u786e\u521d\u59cb\u5316\u7684\u6743\u91cd\u4f1a\u5bfc\u81f4\u68af\u5ea6\u6d88\u5931\u6216\u7206\u70b8\u95ee\u9898\uff0c\u4ece\u800c\u5bf9\u8bad\u7ec3\u8fc7\u7a0b\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002</p> <p>\u5bf9\u4e8e\u68af\u5ea6\u6d88\u5931\u95ee\u9898\uff0c\u6743\u91cd\u66f4\u65b0\u5f88\u5c0f\uff0c\u5bfc\u81f4\u6536\u655b\u901f\u5ea6\u53d8\u6162\u2014\u2014\u8fd9\u4f7f\u5f97\u635f\u5931\u51fd\u6570\u7684\u4f18\u5316\u53d8\u6162\uff0c\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u80fd\u4f1a\u963b\u6b62\u7f51\u7edc\u5b8c\u5168\u6536\u655b\u3002\u76f8\u53cd\uff0c\u4f7f\u7528\u8fc7\u5927\u7684\u6743\u91cd\u8fdb\u884c\u521d\u59cb\u5316\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5728\u524d\u5411\u4f20\u64ad\u6216\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u68af\u5ea6\u503c\u7206\u70b8\u3002</p> <p>\u4e00\u822c\u91c7\u7528\u4f55\u51ef\u660e\u521d\u59cb\u5316\uff0ctorch.nn\u7684linear,conv\u51fd\u6570\u5728init\u65f6\u5df2\u7ecf\u5185\u7f6e\u4e86kaiming\u521d\u59cb\u5316\uff0c\u65e0\u9700\u5173\u7cfb\u3002</p> <p>\u53e6\u5916\uff0c\u53ef\u4ee5\u7528\u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6743\u91cd\u505a\u521d\u59cb\u5316\u3002\u51bb\u7ed3\u6df1\u5c42\u7f51\u7edc\u53c2\u6570\uff0c\u53ea\u5bf9\u6d45\u5c42\u505a\u66f4\u65b0\uff0c\u6548\u679c\u4e5f\u5f88\u597d</p>"},{"location":"cifar10/%E9%97%AE%E9%A2%98/#4-dataloader","title":"4. Dataloader\u7684\u6784\u9020\uff1f","text":"<p>DataLoader\u5305\u62ec\u4e24\u4e2a\u5b50\u6a21\u5757\uff0cSampler\u6a21\u5757\uff0c\u4e3b\u8981\u662f\u751f\u6210\u7d22\u5f15index\uff0cDataSet\u6a21\u5757\uff0c\u4e3b\u8981\u662f\u6839\u636e\u7d22\u5f15\u8bfb\u53d6\u6570\u636e\u3002Dataset \u7c7b\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u8868\u793a\u6570\u636e\u96c6\u3002\u6211\u4eec\u901a\u8fc7\u7ee7\u627f Dataset \u7c7b\u6765\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7684\u683c\u5f0f\u3001\u5927\u5c0f\u548c\u5176\u5b83\u5c5e\u6027\uff0c\u540e\u9762\u5c31\u53ef\u4ee5\u4f9b DataLoader \u7c7b\u76f4\u63a5\u4f7f\u7528\u3002</p> <p>\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\uff0c\u5982\u679c\u6570\u636e\u91cf\u5f88\u5927\uff0c\u8003\u8651\u5230\u5185\u5b58\u6709\u9650\u3001I/O \u901f\u5ea6\u7b49\u95ee\u9898\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4e0d\u53ef\u80fd\u4e00\u6b21\u6027\u7684\u5c06\u6240\u6709\u6570\u636e\u5168\u90e8\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u4e5f\u4e0d\u80fd\u53ea\u7528\u4e00\u4e2a\u8fdb\u7a0b\u53bb\u52a0\u8f7d\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u591a\u8fdb\u7a0b\u3001\u8fed\u4ee3\u52a0\u8f7d\uff0c\u800c DataLoader \u5c31\u662f\u57fa\u4e8e\u8fd9\u4e9b\u9700\u8981\u88ab\u8bbe\u8ba1\u51fa\u6765\u7684\u3002DataLoader \u662f\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u6700\u57fa\u672c\u7684\u4f7f\u7528\u65b9\u6cd5\u5c31\u662f\u4f20\u5165\u4e00\u4e2a Dataset \u5bf9\u8c61\uff0c\u5b83\u4f1a\u6839\u636e\u53c2\u6570 batch_size \u7684\u503c\u751f\u6210\u4e00\u4e2a batch \u7684\u6570\u636e\uff0c\u8282\u7701\u5185\u5b58\u7684\u540c\u65f6\uff0c\u5b83\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u591a\u8fdb\u7a0b\u3001\u6570\u636e\u6253\u4e71\u7b49\u5904\u7406\u3002</p>"},{"location":"cifar10/%E9%97%AE%E9%A2%98/#5-loss","title":"5. \u4e0d\u540c\u4efb\u52a1loss\u8861\u91cf\u51fd\u6570\u7684\u9009\u53d6\uff1f","text":"<p>\u56de\u5f52\u635f\u5931\u4e00\u822c\u91c7\u7528MSE</p> <p>\u5206\u7c7b\u4efb\u52a1\u5e38\u7528\u4ea4\u53c9\u71b5</p> <p>loss\u51fd\u6570\u9009\u53d6\u4e0e\u8bbe\u7f6e\u5f80\u5f80\u968f\u7740\u4efb\u52a1\u573a\u666f\u548c\u5148\u9a8c\u77e5\u8bc6\u800c\u53d1\u751f\u53d8\u52a8</p>"},{"location":"cifar10/%E9%97%AE%E9%A2%98/#q1-inductive-bias","title":"Q1:\u5f52\u7eb3\u504f\u7f6e inductive bias\uff08\u4e3a\u4ec0\u4e48\u6211\u7684\u7f51\u7edc\u53ef\u4ee5\u5b66\u4e60\u5230\u56fe\u50cf\u4fe1\u606f\uff09","text":"<p>\u5148\u9a8c\u5047\u8bbe\uff1a\u5377\u79ef\u5c42\u7684\u53c2\u6570\u5171\u4eab\uff0c\u4f7f\u5f97\u7f51\u7edc\u53ef\u4ee5\u5b66\u4e60\u5230\u56fe\u50cf\u7684\u5c40\u90e8\u7279\u5f81\uff0c\u800c\u4e0d\u662f\u6574\u4f53\u7279\u5f81\u3002 \u6df1\u5ea6\u795e\u7ecf\u7f51\u7edc\uff1a\u5c42\u6b21\u5316\u5904\u7406\u4fe1\u606f\uff0c\u4f7f\u5f97\u7f51\u7edc\u53ef\u4ee5\u5b66\u4e60\u5230\u56fe\u50cf\u7684\u62bd\u8c61\u7279\u5f81\u3002 \u5377\u79ef\u795e\u7ecf\u7f51\u7edcCNN\uff1a\u4fe1\u606f\u5177\u6709\u7a7a\u95f4\u5c40\u90e8\u6027 \u53cd\u9988\u795e\u7ecf\u7f51\u7edcRNN\uff1a\u4fe1\u606f\u5177\u6709\u65f6\u5e8f\u6027\uff0c\u5f3a\u8c03\u987a\u5e8f\u7684\u91cd\u8981\u6027 \u56fe\u795e\u7ecf\u7f51\u7edcGNN\uff1a\u8ba4\u4e3a\u56fe\u4e2d\u5fc3\u8282\u70b9\u4e0e\u5468\u56f4\u8282\u70b9\u7684\u76f8\u90bb\u5173\u7cfb\u53ef\u4ee5\u51b3\u5b9a\u4fe1\u606f\u6d41\u52a8</p>"},{"location":"cifar10/%E9%97%AE%E9%A2%98/#q2","title":"Q2: \u5148\u9a8c\u77e5\u8bc6\u6ce8\u5165\u6df1\u5ea6\u5b66\u4e60\u8fc7\u7a0b","text":"<ol> <li>\u7f51\u7edc\u7ed3\u6784\u5c31\u662f\u5148\u9a8c\u77e5\u8bc6</li> <li>\u7f51\u7edc\u6743\u91cd\u662f\u5148\u9a8c\uff0cimagnet\u9884\u8bad\u7ec3\u6743\u91cdbaseline model(\u56fa\u5b9a\u4e0a\u5c42\u6a21\u578b\u6743\u91cd\uff0c\u53ea\u6539\u53d8\u5168\u8fde\u63a5\u5c42\u53c2\u6570\u505a\u66f4\u65b0)</li> <li>\u6570\u636e\u589e\u5f3a\u6ce8\u5165\u5148\u9a8c\u77e5\u8bc6</li> <li>\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u6b63\u5219\u5316\uff08\u60e9\u7f5a\u9879\uff09L1,L2,</li> </ol>"},{"location":"cifar10/%E9%97%AE%E9%A2%98/#q3baseline-model","title":"Q3:\u5982\u4f55\u5bf9baseline model\u505a\u4f18\u5316\uff0c\u4f7f\u5176\u6027\u80fd\u589e\u957f","text":"<p>\u89c1 \u63a2\u7a76.md</p>"}]}